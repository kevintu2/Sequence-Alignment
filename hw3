package hw3;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Scanner;

public class simpDiff {
	public static LinkedList<String> list1 = new LinkedList<String>();
	public static LinkedList<String> list2 = new LinkedList<String>();

	public static void main(String[] args) {
		
		File in = new File(args[0]);
		File in2 = new File(args[1]);
		Scanner scan;
		Scanner scan2;
		
		try {
			scan = new Scanner(in);
			scan2 = new Scanner(in2);
			
			while(scan.hasNextLine()) {
				list1.add(scan.nextLine());
			}
			while(scan2.hasNextLine()) {
				list2.add(scan2.nextLine());
			}
			
			scan.close();

	}
		catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			System.out.println("Error");
		}
		minpenalty(list1,list2,1);
}
	public static void minpenalty(LinkedList<String> a, LinkedList<String> b, int gap) {
		int n1 = list1.size();
		int n2 = list2.size();
		int mem [][] = new int[n1+1][n2+1];
			
		for(int i = 0; i <= n1 ; i++) {
			mem[i][0] = i * gap;
		}
		for(int i = 0; i <= n2 ; i++) {
			mem[0][i] = i * gap;
		}
		
		for(int i = 1; i <= n1; i++) {
			for(int j = 1; j <= n2; j++) {
				
				if(a.get(i-1).equals(b.get(j-1))) {
					
					mem [i][j] = mem[i-1][j-1];
					
				}
				
				else {
					mem[i][j] = Math.min(mem[i-1][j] + gap, mem[i][j-1] + gap);
				}
			}
		}
		
		for(int i = 0; i< mem.length; i++) {
			System.out.println(Arrays.toString(mem[i]));
		}
		
		int l = n1 + n2;
		int x = n1;
		int y = n2;
		int xpos = l;
		int ypos = l;
		String [] n1ans = new String[l +1];
		String [] n2ans = new String[l+1];
		while(!(x==0 || y==0)) {
			if(list1.get(x-1).equals(list2.get(y-1))) {
				n1ans[xpos--]= list1.get(x-1);
				n2ans[ypos--] = list2.get(y-1);
				x--;
				y--;
			}
			else if(mem[x-1][y] + gap == mem[x][y]) {
				n1ans[xpos--] = list1.get(x-1);
				n2ans[ypos--] = "remove";
				x--;
			}
			else if(mem[x][y-1] + gap == mem[x][y]) {
				n1ans[xpos--] = "add";
				n2ans[ypos--] = list2.get(y-1);
				y--;
			}
		}
		while (xpos > 0) 
	    { 
	        if (x > 0) n1ans[xpos--] = list1.get(--x); 
	        else n1ans[xpos--] = "add"; 
	    } 
	    while (ypos > 0) 
	    { 
	        if (y > 0) n2ans[ypos--] = list2.get(--y); 
	        else n2ans[ypos--] = "remove"; 
	    }
	    int id = 1; 
	    for (int i = l; i >= 1; i--){ 
	    	
	        if (n2ans[i].equals("remove") &&  n1ans[i].equals("add")){ 
	        	
	            id = i + 1; 
	            break; 
	        } 
	    }
	    
	    for (int i = id; i <= l; i++) 
	    { 
	        System.out.print(n1ans[i]+ " ,"); 
	    } 
	    System.out.print("\n"); 
	    for (int i = id; i <= l; i++) 
	    { 
	        System.out.print(n2ans[i]+ " ,"); 
	    }
	    
	    LinkedList<String> answer = new LinkedList<String>();
	    int counter=0;
	    int start = 0;
	    for(int i = id; i < l; i++) {
	    	if(n1ans[i].equals("add")) {
	    		counter++;
	    		start = i-id-counter-1;
	    		if(!(n1ans[i+1].equals("add"))) {
	    			System.out.println("+" + start  + " "+ (counter-1));
	    			start = 0;
	    			
	    		}
	    	}
	    }
	    		
	}
}
