package hw3;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Scanner;

public class simpDiff {
	public static LinkedList<String> list1 = new LinkedList<String>();
	public static LinkedList<String> list2 = new LinkedList<String>();
	public static int pgap = 1;
	public static int [][] matrix;
	static PrintStream outaction = System.out;

	public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {
		
		File in = new File(args[0]);
		File in2 = new File(args[1]);
		Scanner scan;
		Scanner scan2;
		
		try {
			scan = new Scanner(in);
			scan2 = new Scanner(in2);
			
			while(scan.hasNextLine()) {
				list1.add(scan.nextLine());
			}
			while(scan2.hasNextLine()) {
				list2.add(scan2.nextLine());
			}
			
			scan.close();

	}
		catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			System.out.println("Error");
		}
		matrix = minpenalty(list1,list2,pgap);
		findAnswer(matrix);
}
	public static int[][] minpenalty(LinkedList<String> a, LinkedList<String> b, int gap) {
		int n1 = a.size();
		int n2 = b.size();
		int mem [][] = new int[n1+1][n2+1];
			
		for(int i = 0; i <= n1 ; i++) {
			mem[i][0] = i * gap;
		}
		for(int i = 0; i <= n2 ; i++) {
			mem[0][i] = i * gap;
		}
		
		for(int i = 1; i <= n1; i++) {
			for(int j = 1; j <= n2; j++) {
				
				if(a.get(i-1).equals(b.get(j-1))) {
					
					mem [i][j] = mem[i-1][j-1];
					
				}
				
				else {
					mem[i][j] = Math.min(mem[i-1][j] + gap, mem[i][j-1] + gap);
				}
			}
		}
		
		for(int i = 0; i< mem.length; i++) {
			System.out.println(Arrays.toString(mem[i]));
		}
		return mem;
	}
	public static void findAnswer(int [][] array) {
		int totallength = list1.size() + list2.size();
		int x = list1.size();
		int y = list2.size();
		int pos1 = totallength;
		int pos2 = totallength;
		String [] list1ans = new String[totallength + 2];
		String [] list2ans = new String[totallength + 2];
		list1ans[totallength+1] = "something";
		
		while(!(x==0 || y==0)) {
			if(list1.get(x-1).equals(list2.get(y-1))) {
				list1ans[pos1--]= "stay " + list1.get(x - 1);
				list2ans[pos2--] =  "stay " + list2.get(y - 1);
				x--;
				y--;
			}
			else if(array[x][y-1] + pgap == array[x][y]) {
				list1ans[pos1--] = "add " + list2.get(y - 1);
				list2ans[pos2--] = list2.get(y - 1);
				y--;
			}
			else if(array[x-1][y] + pgap == array[x][y]) {
				list1ans[pos1--] = "remove " + list1.get(x-1);
				list2ans[pos2--] = list2.get(x-1);
				x--;
			}

		}
	    while (pos2 > 0){ 
	    	
	        if (y > 0) {
	        	list2ans[pos2--] = list2.get(--y); 
	        }
	        else {
	        	
	        	list2ans[pos2--] = "remove";
	        }
	        	 
	    }
	    
		while (pos1 > 0){ 
			
	        if (x > 0) {
	        	
	        	list1ans[pos1--] = list1.get(--x); 
	        }
	        else {
	        	
	        	list1ans[pos1--] = "add"; 
	        }
	    } 

	    int id = 1; 
	    for (int i = totallength; i >= 1; i--){ 
	    	
	        if (list2ans[i].equals("remove") &&  list1ans[i].equals("add")){ 
	        	
	            id = i + 1; 
	            break; 
	        } 
	    }
	    
	    for (int i = id; i <= totallength; i++) 
	    { 
	        System.out.print(list1ans[i]+ " ,"); 
	    } 
	    System.out.print("\n"); 
	    for (int i = id; i <= totallength; i++) 
	    { 
	        System.out.print(list2ans[i]+ " ,"); 
	 
	    }
	    System.out.print("\n"); 
	    StringBuilder str = new StringBuilder();
	    int counter=1;
	    int start =0;
	    for(int i = id; i <= totallength; i++) {
	    	
	    	if(list1ans[i].substring(0,3).equals(list1ans[i+1].substring(0,3))) {
	    		
	    		if(list1ans[i].contains("add")) {
	    		counter++;
	    		str.append(list2ans[i] + "\n");
	    		}
	    		else if(list1ans[i].contains("remove ")) {
	    			counter++;
	    		}
	    	
	    		
	    		else {
	    			start++;
	    		}
	    	
	    	}

	    	else {
	    		if((list1ans[i].contains("add"))) {
	    			if(counter > 1) {
	    				outaction.println("+" + (start)  + " "+ (counter) + "\n" + str);
	    				counter = 1;
	    			}
	    			else {
	    				outaction.println("+" + start + " " + counter  + "\n" + list2ans[i] );
	    			}
	    			str.setLength(0);

	    			
	    	}
	    		else if(list1ans[i].contains("remove")) {
	    			outaction.println("-" + start + " " + counter);
	    			start+=counter;
	    			counter = 1;
	    			str.setLength(0);
	    		}
	    		else {
	    			start++;
	    		}
	    	}

	    		
	    		
	    	
	    }
	    		
	}
}
