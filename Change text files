

import java.io.File;
import java.io.FileNotFoundException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Scanner;

class Main{
	public static LinkedList<String> list1 = new LinkedList<String>();
	public static LinkedList<String> list2 = new LinkedList<String>();
	public static int pgap = 1;
	public static ArrayList<String> store = new ArrayList<String>();
	public static int [][] matrix;
	

	public static void main(String[] args) {
		
		File in = new File(args[0]);
		File in2 = new File(args[1]);
		Scanner scan;
		Scanner scan2;
		
	
			try {
			scan = new Scanner(in);
			scan2 = new Scanner(in2);
			
			while(scan.hasNextLine()) {
				list1.add(scan.nextLine());
			}
			while(scan2.hasNextLine()) {
				list2.add(scan2.nextLine());
			}
			
			scan.close();
			scan2.close();
			}
			catch (FileNotFoundException e) {
				System.out.println("wrong");
			}
			
			matrix = minpenalty(list1,list2,pgap);
			findAnswer(matrix, list1.size(), list2.size());
//			System.out.println(Arrays.deepToString(store.toArray()));
			print(store);
}

	public static int[][] minpenalty(LinkedList<String> a, LinkedList<String> b, int gap) {
		int n1 = a.size();
		int n2 = b.size();
		int mem [][] = new int[n1+1][n2+1];
			
		for(int i = 0; i <= n1 ; i++) {
			mem[i][0] = i * gap;
		}
		for(int i = 0; i <= n2 ; i++) {
			mem[0][i] = i * gap;
		}
		
		for(int i = 1; i <= n1; i++) {
			for(int j = 1; j <= n2; j++) {
				
				if(a.get(i-1).equals(b.get(j-1))) {
					
					mem [i][j] = mem[i-1][j-1];
					
				}
				
				else {
					mem[i][j] = Math.min(Math.min(mem[i-1][j] + gap, mem[i-1][j-1] + 1000),mem[i][j-1] + gap);
				}
			}
		}
		
//		for(int i = 0; i< mem.length; i++) {
//			System.out.println(Arrays.toString(mem[i]));
//		}
		return mem;
	}
	
	public static int match(int index1, int index2) {
		if(list1.get(index1-1).equals(list2.get(index2-1))) {
			return 0;
	}
		else {
			return 1000;
		}
	}
	
	public static void findAnswer(int [][] array, int l1, int l2) {
		if(l1 == 0 && l2 == 0) {
			store.add("null");
		}
		else {
		
		int add, remove, stay;
		if(l2!=0) {
			add = array[l1][l2-1] + pgap;
		}
		else {
			add = 1000;
		}
		
		if(l1 != 0 && l2 != 0) {
			stay = array[l1-1][l2-1] + match(l1,l2);
		}
		else {
			stay = 1000;
		}
		if(l1!=0) {
			remove = array[l1-1][l2] + pgap;
		}
		else {
			remove = 1000;
		}
		
		int optimal = Math.min(Math.min(add,stay),remove);
		
		if(optimal == add) {
			store.add("ADD " + list2.get(l2-1));
			findAnswer(array, l1, l2-1);
		}
		
		else if(optimal == stay) {
			store.add("STAY " + list2.get(l2-1));
			findAnswer(array, l1-1, l2-1);
		}
		else if(optimal == remove) {
			store.add("REMOVE " + list1.get(l1-1));
			findAnswer(array, l1-1, l2);
		}
		
		}
		
	}
	
	public static void print(ArrayList<String> s) {
		StringBuilder str = new StringBuilder();
	    int counter=1;
	    int start =-1;
	    Collections.reverse(s);
	    s.add("something");
	    for(int i = 0; i < s.size() -1 ; i++) {
	    	
	    	if(s.get(i).substring(0,2).equals(s.get(i+1).substring(0,2))) {
	    		
	    		if(s.get(i).contains("ADD")) {
	    		counter++;
	    		str.append(s.get(i).substring(4,s.get(i).length()) + "\n");
	    		}
	    		else if(s.get(i).contains("REMOVE ")) {
	    			counter++;
	    		}
	    	
	    		
	    		else {
	    			start++;
	    		}
	    	
	    	}

	    	else {
	    		if((s.get(i).contains("ADD"))) {
	    			if(counter >1) {
	    				str.append(s.get(i).substring(4,s.get(i).length()) + "\n");
	    				System.out.print("+ " + (start)  + " "+ (counter) + "\n" + str);
	    				counter = 1;
	    			}
	    			else {
	    				System.out.println("+ " + start + " " + counter  + "\n" + s.get(i).substring(4,s.get(i).length()));
	    			}
	    			str.setLength(0);

	    			
	    	}
	    		else if(s.get(i).contains("REMOVE")) {
	    			System.out.println("- " + start + " " + counter);
	    			start+=counter;
	    			counter = 1;
	    			str.setLength(0);
	    		}
	    		else {
	    			start++;
	    		}
	    	}
	    }
	}
}
